//////
// variable definitions
//////
////
// export setting
////
[VarDef, Tool_Export_Tri]
[VarDef, Tool_Polypaint_Colorize]
[VarDef, Tool_Export_Txr]
[VarDef, Tool_Export_Flp]
[VarDef, Tool_Export_Mrg]
[VarDef, Tool_Export_Grp]
////
// dll path, language
////
[VarDef, zfutilPath, "dummy"]
[VarDef, dllPath, "dummy"]
[VarDef, enLangFilePath, "dummy"]
[VarDef, language]
// debug
//[VarDef, dataDirPath, [fileNameResolvePath, "ThicknessCheckerData\"]]
// install
[VarDef, dataDirPath, [fileNameResolvePath, "ZBRUSH_ZSTARTUP\ZPlugs64\ThicknessCheckerData\"]]
////
// temporary files
////
[VarDef, tmpFile, "tmp.obj"]
[VarDef, colorOBJFile, "thickness.obj"]
////
// parameters for computation
////
[VarDef, height, 100.0]
[VarDef, preferredThickness, 5.0]
[VarDef, minimumThickness, 3.0]
[VarDef, doubleParam]
[MemCreate, acceleratorTextMem, 256, 0]
[VarDef, acceleratorText, ""]
[VarDef, chosenAccelerator, "dummy"]
//////

//////
// search dlls
// from http://docs.pixologic.com/user-guide/customizing-zbrush/zscripting/zfileutils/#dllPath
//////
[RoutineDef, CheckSystem,
    //check ZBrush version
    [VarSet,Zvers,[ZBrushInfo,0]]
    [If,[Val,Zvers] >= 4.8,,		
        [Note,"\Cff9923This zscript\Cffffff is not designed for this version of \Cff9923ZBrush\Cffffff.",,3,4737096,,300]
        [Exit]
    ]
    // Make sure we have the dll and set its path
    [If, [ZBrushInfo, 6]==0,//windows
        //use the path below for testing only
        //[VarSet, dllPath, "ThicknessCheckerData\ThicknessChecker.dll"]
        //[VarSet, zfutilPath, "ThicknessCheckerData\ZFileUtils64.dll"]
        //[VarSet, enLangFilePath, "ThicknessCheckerData\lang\ThicknessChecker_en.xml"]
        //use the path below for installed plugins
        [VarSet, dllPath, "ZBRUSH_ZSTARTUP\ZPlugs64\ThicknessCheckerData\ThicknessChecker.dll"]
        [VarSet, zfutilPath, "ZBRUSH_ZSTARTUP\ZPlugs64\ThicknessCheckerData\ZFileUtils64.dll"]
        [VarSet, enLangFilePath, "ZBRUSH_ZSTARTUP\ZPlugs64\ThicknessCheckerData\lang\ThicknessChecker_en.xml"]
        ,
        //use the path below for testing only
        //[VarSet, dllPath, "ThicknessCheckerData/ThicknessChecker.lib"]
        //[VarSet, zfutilPath, "ThicknessCheckerData/ZFileUtils.lib"]
        //[VarSet, enLangFilePath, "ThicknessCheckerData/lang/ThicknessChecker_en.xml"]
        //use the path below for installed plugins
        [VarSet, dllPath, "ZBRUSH_ZSTARTUP/ZPlugs64/ThicknessCheckerData/ThicknessChecker.lib"]
        [VarSet, zfutilPath, "ZBRUSH_ZSTARTUP/ZPlugs64/ThicknessCheckerData/ZFileUtils.lib"]
        [VarSet, enLangFilePath, "ZBRUSH_ZSTARTUP/ZPlugs64/ThicknessCheckerData/lang/ThicknessChecker_en.xml"]
    ]
    // check if there are dll/lib exists
    [If, [FileExists, [Var,dllPath]],
    , // else no DLL.
    [Note,"\Cff9923Note :\Cc0c0c0 The \Cff9923 ThicknessChecker plugin \Cffffffdll/lib\Cc0c0c0 could not be found at the correct location.  Please re-install the plugin, making sure the relevant files and folders are in the \CffffffZStartup/ZPlugs\Cc0c0c0 folder."]
    [Exit]
    ]
]
//////

//////
// translation routine
// from http://docs.pixologic.com/user-guide/customizing-zbrush/zscripting/zfileutils/localization/
//////
[RoutineDef, ZFU_RegisterLocalizationFile,
	[FileExecute, [Var, zfutilPath], RegisterLocalizationFile, enFilePath]
, enFilePath]
//////

//////
// startup
//////
// + search dll
// + get accelerators
[RoutineCall, CheckSystem]
//[RoutineCall, ZFU_GetCurrentLanguage, language]
[RoutineCall, ZFU_RegisterLocalizationFile, [FileNameResolvePath, [Var, enLangFilePath]]]
[FileExecute, [Var, dllPath], "getAccelerator", , , acceleratorTextMem]
[MemReadString, acceleratorTextMem, acceleratorText]
// 4 is hard coded...
[VarDef, acceleratorNames(4), ""]
[VarDef, acceleratorSpecs(4), ""]
[VarDef, loopCount, 0]
[Loop, 4,
    [If, [StrFind, ",", acceleratorText] == -1,
        [Varset, acceleratorNames(loopCount), "none"]
        [Varset, acceleratorSpecs(loopCount), "none"]
        ,
        // last entry
        [If, [StrFind, ";", acceleratorText] == -1,
            [VarSet, GPUFullText, acceleratorText]
            [VarSet, acceleratorText, ""]
            [VarSet, acceleratorNames(loopCount), [StrExtract, GPUFullText, 0, [StrFind, ",", GPUFullText]-1]]
            [VarSet, acceleratorSpecs(loopCount), [StrExtract, GPUFullText, [StrFind, ",", GPUFullText]+1, [StrLength, GPUFullText]]]
            ,
            [VarSet, GPUFullText, [StrExtract, acceleratorText, 0, [StrFind, ";", acceleratorText]-1]]
            [VarSet, acceleratorText, [StrExtract, acceleratorText, [StrFind, ";", acceleratorText]+1, [StrLength, acceleratorText]]]
            [VarSet, acceleratorNames(loopCount), [StrExtract, GPUFullText, 0, [StrFind, ",", GPUFullText]-1]]
            [VarSet, acceleratorSpecs(loopCount), [StrExtract, GPUFullText, [StrFind, ",", GPUFullText]+1, [StrLength, GPUFullText]]]
        ]
    ]
    ,
    loopCount
]


[RoutineDef, oneHot,
    [ISet, [StrMerge, "ZPlugin:ThicknessChecker:GPU:", [Var, acceleratorNames(0)]], [StrFind, [Var, acceleratorNames(0)], [Var, chosenAccelerator]] == 0]
    [ISet, [StrMerge, "ZPlugin:ThicknessChecker:GPU:", [Var, acceleratorNames(1)]], [StrFind, [Var, acceleratorNames(1)], [Var, chosenAccelerator]] == 0]
    [ISet, [StrMerge, "ZPlugin:ThicknessChecker:GPU:", [Var, acceleratorNames(2)]], [StrFind, [Var, acceleratorNames(2)], [Var, chosenAccelerator]] == 0]
    [ISet, [StrMerge, "ZPlugin:ThicknessChecker:GPU:", [Var, acceleratorNames(3)]], [StrFind, [Var, acceleratorNames(3)], [Var, chosenAccelerator]] == 0]
]

//////
// UI
//////
[ISubPalette, "ZPlugin:ThicknessChecker"]

[ISlider, "ZPlugin:ThicknessChecker:Height (Y)", 100.0, 0.001, 0.0, 300.0, "Height along with Y direction",
    [VarSet, height, [IGet, "ZPlugin:ThicknessChecker:Height (Y)"]],
    0,
    1
]
[ISlider, "ZPlugin:ThicknessChecker:Preferred thickness", 5.0, 0.001, 0, 10.0, "The region thicker than this value, it will be colored in blue",
    [VarSet, preferredThickness, [IGet, "ZPlugin:ThicknessChecker:Preferred thickness"]],
    0,
    1
]
[ISlider, "ZPlugin:ThicknessChecker:Minimum thickness", 3.0, 0.001, 0, 10.0, "The region thinner than this value, it will be colored in red",
    [VarSet, minimumThickness, [IGet, "ZPlugin:ThicknessChecker:Minimum thickness"]],
    0,
    1
]

[ISubPalette, "ZPlugin:ThicknessChecker:GPU"]

[ISwitch, [StrMerge, "ZPlugin:ThicknessChecker:GPU:", [Var, acceleratorNames(0)]], 1, [Var, acceleratorSpecs(0)],
    [VarSet, chosenAccelerator, [Var, acceleratorNames(0)]]
    [RoutineCall, oneHot]
    ,
    ,
    ([StrFind, "none", acceleratorNames(0)] == 0),
    1
]
[ISwitch, [StrMerge, "ZPlugin:ThicknessChecker:GPU:", [Var, acceleratorNames(1)]], 0, [Var, acceleratorSpecs(1)],
    [VarSet, chosenAccelerator, [Var, acceleratorNames(1)]]
    [RoutineCall, oneHot]
    ,
    ,
    ([StrFind, "none", acceleratorNames(1)] == 0),
    1
]
[ISwitch, [StrMerge, "ZPlugin:ThicknessChecker:GPU:", [Var, acceleratorNames(2)]], 0, [Var, acceleratorSpecs(2)],
    [VarSet, chosenAccelerator, [Var, acceleratorNames(2)]]
    [RoutineCall, oneHot]
    ,
    ,
    ([StrFind, "none", acceleratorNames(2)] == 0),
    1
]
[ISwitch, [StrMerge, "ZPlugin:ThicknessChecker:GPU:", [Var, acceleratorNames(3)]], 0, [Var, acceleratorSpecs(3)],
    [VarSet, chosenAccelerator, [Var, acceleratorNames(3)]]
    [RoutineCall, oneHot]
    ,
    ,
    ([StrFind, "none", acceleratorNames(3)] == 0),
    1
]

[Loop, 4,
    [If, [StrFind, "none", acceleratorNames(loopCount)] == 0,
        [IHide, [StrMerge, "ZPlugin:ThicknessChecker:GPU:", [Var, acceleratorNames(loopCount)]]]
    ]
    ,
    loopCount
]

[VarSet, chosenAccelerator,  [Var, acceleratorNames(0)]]


[IButton, "ZPlugin:ThicknessChecker:Compute", "Start thickness computation",
    [If, [IExists, Tool:Export],
        [RoutineCall, CheckSystem]
        // store current export settings
        [VarSet, Tool_Export_Tri,[IGet, Tool:Export:Tri]]
        [VarSet, Tool_Polypaint_Colorize,[IGet, Tool:Polypaint:Colorize]]
        [VarSet, Tool_Export_Txr,[IGet, Tool:Export:Txr]]
        [VarSet, Tool_Export_Flp,[IGet, Tool:Export:Flp]]
        [VarSet, Tool_Export_Mrg,[IGet, Tool:Export:Mrg]]
        [VarSet, Tool_Export_Grp,[IGet, Tool:Export:Grp]]

        //set export options
        [IPress,Tool:Export:Tri]
        [IPress,Tool:Polypaint:Colorize]
        // don't need any extra attributes
        [IUnPress,Tool:Export:Txr]
        [IUnPress,Tool:Export:Flp]
        [IUnPress,Tool:Export:Mrg]
        [IUnPress,Tool:Export:Grp]

        //export current subtool to OBJ file (temporary file)
        [FileNameSetNext, [StrMerge, [Var, dataDirPath], [Var, tmpFile]]]
        [IPress,Tool:Export]

        // restore original settings
        [If, [Var, Tool_Export_Tri],
            [IPress, Tool:Export:Tri],
            [IPress, Tool:Export:Qud]
        ]
        [ISet, Tool:Polypaint:Colorize, [Var, Tool_Polypaint_Colorize]]
        [ISet, Tool:Export:Txr, [Var, Tool_Export_Txr]]
        [ISet, Tool:Export:Flp, [Var, Tool_Export_Flp]]
        [ISet, Tool:Export:Mrg, [Var, Tool_Export_Mrg]]
        [ISet, Tool:Export:Grp, [Var, Tool_Export_Grp]]
        ////

        [VarDef, textForDll, [StrMerge, [Var, dataDirPath], ",", [Var, tmpFile], ",", [Var, colorOBJFile], ",", [Var, chosenAccelerator]]]
        [MVarDef, mem, 3, 0]
        [MVarSet, mem, 0, [Var, height]]
        [MVarSet, mem, 1, [Var, preferredThickness]]
        [MVarSet, mem, 2, [Var, minimumThickness]]
        [VarDef, result, [FileExecute, [Var, dllPath], "checkThickness", textForDll, 0, mem]]

        [If, result,
            // import to Tool
            [IFreeze,
                [IPress,Tool:PolyMesh3D]
                [FileNameSetNext, [StrMerge, [Var, dataDirPath], [Var, colorOBJFile]]]
                [IPress,"Tool:Import"]

                // erase temporary file.
                [FileDelete, [StrMerge, [Var, dataDirPath], [Var, tmpFile]]]
                [FileDelete, [StrMerge, [Var, dataDirPath], [Var, colorOBJFile]]]
            ]
        ,
            [Note, "Sorry, there is some error..."]
        ]
    ]
    ,
    0,
    1
]
